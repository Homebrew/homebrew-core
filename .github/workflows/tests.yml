name: GitHub Actions CI

on:
  push:
    branches:
      - master
  pull_request:

env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_CHANGE_ARCH_TO_ARM: 1
  HOMEBREW_RELOCATE_RPATHS: 1

concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tap_syntax:
    if: github.repository == 'Homebrew/homebrew-core'
    runs-on: ubuntu-latest
    # TODO reenable
    #container:
    #  image: ghcr.io/homebrew/ubuntu16.04:master
    env:
      HOMEBREW_SIMULATE_MACOS_ON_LINUX: 1
    steps:
      - run: echo SKIP
      # TODO reenable
      # - name: Set up Homebrew
      #   id: set-up-homebrew
      #   uses: Homebrew/actions/setup-homebrew@master
      # - run: brew test-bot --only-tap-syntax

  pre_tests:
    if: github.event_name == 'pull_request' && github.repository == 'Homebrew/homebrew-core'
    runs-on: ubuntu-latest
    needs: tap_syntax
    outputs:
      syntax-only: ${{ steps.check-labels.outputs.syntax-only }}
      force-arm: ${{ steps.check-labels.outputs.force-arm }}
      force-linux: ${{ steps.check-labels.outputs.force-linux }}
      test-bot-fail-fast: ${{ steps.check-labels.outputs.test-bot-fail-fast }}
      test-bot-skip-recursive-dependents: ${{ steps.check-labels.outputs.test-bot-skip-recursive-dependents }}
      linux-self-hosted: ${{ steps.check-labels.outputs.linux-self-hosted }}
      linux-wheezy: ${{ steps.check-labels.outputs.linux-wheezy }}
    steps:
      - name: Check for CI labels
        id: check-labels
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: { labels: labels } } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })
            const label_names = labels.map(label => label.name)

            if (label_names.includes('CI-syntax-only')) {
              console.log('CI-syntax-only label found. Skipping tests.')
              core.setOutput('syntax-only', 'true')
            } else {
              console.log('No CI-syntax-only label found. Running tests.')
              core.setOutput('syntax-only', 'false')
            }

            if (label_names.includes('CI-force-arm')) {
              console.log('CI-force-arm label found. Running ARM builds.')
              core.setOutput('force-arm', 'true')
            } else {
              console.log('No CI-force-arm label found. Not requiring ARM builds.')
              core.setOutput('force-arm', 'false')
            }

            if (label_names.includes('CI-force-linux')) {
              console.log('CI-force-linux label found. Running Linux builds.')
              core.setOutput('force-linux', 'true')
            } else {
              console.log('No CI-force-linux label found. Not requiring Linux builds.')
              core.setOutput('force-linux', 'false')
            }

            if (label_names.includes('CI-test-bot-fail-fast')) {
              console.log('CI-test-bot-fail-fast label found. Passing --fail-fast to brew test-bot.')
              core.setOutput('test-bot-fail-fast', '--fail-fast')
            } else {
              console.log('No CI-test-bot-fail-fast label found. Not passing --fail-fast to brew test-bot.')
              core.setOutput('test-bot-fail-fast', '')
            }

            if (label_names.includes('CI-test-bot-skip-recursive-dependents')) {
              console.log('CI-test-bot-skip-recursive-dependents label found. Passing --skip-recursive-dependents to brew test-bot.')
              core.setOutput('test-bot-skip-recursive-dependents', '--skip-recursive-dependents')
            } else {
              console.log('No CI-test-bot-skip-recursive-dependents label found. Not passing --skip-recursive-dependents to brew test-bot.')
              core.setOutput('test-bot-skip-recursive-dependents', '')
            }

            if (label_names.includes('CI-linux-self-hosted')) {
              console.log('CI-linux-self-hosted label found. Running Linux builds on self-hosted runners.')
              core.setOutput('linux-self-hosted', 'true')
            } else {
              console.log('No CI-linux-wheezy label found. Not requiring Linux self-hosted runners.')
              core.setOutput('linux-self-hosted', 'false')
            }

            if (label_names.includes('CI-linux-wheezy')) {
              console.log('CI-linux-wheezy label found. Running Linux wheezy builds.')
              core.setOutput('linux-wheezy', 'true')
            } else {
              console.log('No CI-linux-wheezy label found. Not requiring Linux wheezy builds.')
              core.setOutput('linux-wheezy', 'false')
            }

  tests_macos:
    needs: pre_tests
    if: github.event_name == 'pull_request' && needs.pre_tests.outputs.syntax-only == 'false'
    strategy:
      fail-fast: false
      matrix:
        # TODO reenable
        runner: ["11-arm64"] # ["11-arm64", "11", "10.15", "10.14"]
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 4320
    defaults:
      run:
        shell: /bin/bash -e {0}
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
      PATH: "/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
      GITHUB_ACTIONS_HOMEBREW_MACOS_SELF_HOSTED: 1
    steps:
      - name: Set environment variables
        if: needs.pre_tests.outputs.force-arm == 'false'
        run: echo 'HOMEBREW_SKIP_UNBOTTLED_ARM_TESTS=1' >> $GITHUB_ENV

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - run: brew test-bot --only-cleanup-before

      - run: brew test-bot --only-setup

      - name: Run brew test-bot --only-json-tab --only-formulae ${{ needs.tap_syntax.outputs.test-bot-fail-fast }} ${{ needs.tap_syntax.outputs.test-bot-skip-recursive-dependents }}
        run: |
          mkdir bottles
          cd bottles
          brew test-bot --only-json-tab --only-formulae ${{ needs.pre_tests.outputs.test-bot-fail-fast }} ${{ needs.pre_tests.outputs.test-bot-skip-recursive-dependents }}

      - name: Output brew test-bot --only-json-tab --only-formulae ${{ needs.pre_tests.outputs.test-bot-fail-fast }} ${{ needs.pre_tests.outputs.test-bot-skip-recursive-dependents }} failures
        if: always()
        run: |
          cat bottles/steps_output.txt
          rm bottles/steps_output.txt

      - name: Output brew bottle result
        if: always()
        run: |
          cat bottles/bottle_output.txt
          rm bottles/bottle_output.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: logs-${{ matrix.runner }}
          path: bottles/logs

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf bottles/logs
          rm -rvf bottles/home

      - name: Count bottles
        id: bottles
        if: always()
        run: |
          cd bottles
          count=$(ls *.json | wc -l | xargs echo -n)
          echo "$count bottles"
          echo "::set-output name=count::$count"
          failures=$(ls failed/*.json | wc -l | xargs echo -n)
          echo "$failures failed bottles"
          echo "::set-output name=failures::$failures"

      - name: Upload failed bottles
        if: always() && steps.bottles.outputs.failures > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles-${{ matrix.runner }}
          path: bottles/failed

      # Must be run before the `Upload bottles` step so that failed
      # bottles are not included in the `bottles` artifact.
      - name: Delete failed bottles
        if: always()
        run: rm -rvf bottles/failed

      - name: Upload bottles
        if: always() && steps.bottles.outputs.count > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: bottles

      - name: Post cleanup
        if: always()
        run: |
          brew test-bot --only-cleanup-after
          rm -rvf bottles

  tests_linux:
    needs: pre_tests
    if: github.event_name == 'pull_request' && needs.pre_tests.outputs.syntax-only == 'false'
    runs-on: ${{needs.pre_tests.outputs.linux-self-hosted == 'true' && 'linux-self-hosted-1' || 'ubuntu-latest'}}
    timeout-minutes: 4320
    container:
      image: ${{needs.pre_tests.outputs.linux-wheezy == 'true' && 'homebrew/debian7:latest' || 'ghcr.io/homebrew/ubuntu16.04:master'}}
      options: --user=linuxbrew
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_FORCE_HOMEBREW_ON_LINUX: 1
    steps:
      - name: Set environment variables
        if: needs.pre_tests.outputs.force-linux == 'false'
        run: echo 'HOMEBREW_SKIP_UNBOTTLED_LINUX_TESTS=1' | sudo tee -a $GITHUB_ENV

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@docker

      - run: brew test-bot --only-setup

      - name: Run brew test-bot --only-json-tab --only-formulae ${{ needs.tap_syntax.outputs.test-bot-fail-fast }} ${{ needs.tap_syntax.outputs.test-bot-skip-recursive-dependents }}
        run: |
          mkdir ~/bottles
          cd ~/bottles
          brew test-bot --only-json-tab --only-formulae ${{ needs.pre_tests.outputs.test-bot-fail-fast }} ${{ needs.pre_tests.outputs.test-bot-skip-recursive-dependents }}

      - name: Output brew test-bot --only-json-tab --only-formulae ${{ needs.pre_tests.outputs.test-bot-fail-fast }} ${{ needs.pre_tests.outputs.test-bot-skip-recursive-dependents }} failures
        if: always()
        run: |
          cat ~/bottles/steps_output.txt
          rm ~/bottles/steps_output.txt

      - name: Output brew bottle result
        if: always()
        run: |
          cat ~/bottles/bottle_output.txt
          rm ~/bottles/bottle_output.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: logs-linux
          path: ~/bottles/logs

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf ~/bottles/logs
          rm -rvf ~/bottles/home

      - name: Count bottles
        id: bottles
        if: always()
        run: |
          cd ~/bottles
          count=$(ls *.json | wc -l | xargs echo -n)
          echo "$count bottles"
          echo "::set-output name=count::$count"
          failures=$(ls failed/*.json | wc -l | xargs echo -n)
          echo "$failures failed bottles"
          echo "::set-output name=failures::$failures"

      - name: Upload failed bottles
        if: always() && steps.bottles.outputs.failures > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles-${{ matrix.runner }}
          path: ~/bottles/failed

      # Must be run before the `Upload bottles` step so that failed
      # bottles are not included in the `bottles` artifact.
      - name: Delete failed bottles
        if: always()
        run: rm -rvf ~/bottles/failed

      - name: Upload bottles
        if: always() && steps.bottles.outputs.count > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: ~/bottles

  tests_test:
    runs-on: ubuntu-latest
    needs: ${{github.event.number == 1 && 'test_linux' || 'test_macos'}}
    steps:
      - run: echo
